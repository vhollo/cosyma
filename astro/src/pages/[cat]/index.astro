---
export interface Props {
  slug: Object;
}

import Mozaik from '../../layouts/Mozaik.astro'

import { client } from '../../lib/sanityClient.js';
import { allCategoriesWithPosts } from '../../lib/api.js';
import { allPosts } from '../../lib/api.js';
//import { catPages } from '../../lib/api.js';

export async function getStaticPaths() {
  const paths = new Set();

  // Collect Menuitems (once)
  //const pages = await client.fetch(catPages);
  //const pages = await client.fetch(allCategoriesWithPosts);
  //console.log({pages})

  // Collect indexPosts
  const allBlogPosts = await client.fetch(allPosts);
  const indexPosts = allBlogPosts?.filter((post) => post.index != !1)
  /*indexPosts.map(post => {
    //console.log(post.category)
    post.cat = post.category.slug
  })*/

  // Prepare all post pages
  let menu = new Object()
  const allCategoryData = await client.fetch(allCategoriesWithPosts);
  const cats = allCategoryData.slice()
  cats.map(category => {
    category.menu = new Object()
  //console.log(category.slug)
    const slugs = Object.entries(category.slug)
    slugs.forEach(([lang, slug]) => {
      category.menu[lang] = new Array()
      let filteredPosts = new Array()

      if (lang == slug.current) {
        filteredPosts = indexPosts.filter((p) => p._lang == lang)

        // Prepare main Nav (on every post)
        allCategoryData.slice().map(cat => {

          //category.menu[lang][slug.current] = new Array()
          const fPosts = cat.posts?.filter(p => p._lang == lang);

          if (cat.abc || cat.order == 'abc') {
            fPosts.sort((a, b) => {
              return a.slug.current.localeCompare(b.slug.current)
            })
          }
          category.menu[lang][slug.current] = fPosts
        })
      
      }
      //console.log(category.menu)
      else filteredPosts = category.posts?.filter(p => p._lang == lang);
      /*filteredPosts.map(p => { /// ?
        p.cat = category.slug
      })*/
      if (category.abc || category.order == 'abc') {
        filteredPosts.sort((a, b) => {
          return a.slug.current.localeCompare(b.slug.current)
        })
      }
      //category.menu[lang][cat.slug[lang].current] = category.menu[lang][cat.slug[lang].current] || filteredPosts /// ?


      paths.add({params: {cat: slug.current}, props: {lang: lang, pages: allCategoryData, posts: filteredPosts, page: category}})
      /*if (slug.current == 'hu') {
        slug.current = undefined;
        paths.add({params: {cat: slug.current}, props: {lang: lang, pages: pages, posts: filteredPosts, page: page[0]}})
      }*/
    });
  })
  //console.log(pages)
  
  return Array.from(paths)
}

const { page, pages, posts, lang } = Astro.props
//console.log(page.menu.en)
/*pages.forEach(p => {
  console.log(p.slug[lang]?.current, p.menu)
})*/

---

<Mozaik {...Astro.props} {lang} summaryfrom="auto"/>
