---
export interface Props {
  slug: Object;
}

import Mozaik from '../../layouts/Mozaik.astro'

import { client } from '../../lib/sanityClient.js';
import { allCategoriesWithPosts } from '../../lib/api.js';
import { allPosts } from '../../lib/api.js';
import { catPages } from '../../lib/api.js';

export async function getStaticPaths() {
  const paths = new Set();

  // Collect Menuitems (once)
  //const pages = await client.fetch(catPages);
  //const pages = await client.fetch(allCategoriesWithPosts);
  //console.log({pages})

  // Collect indexPosts
  const allBlogPosts = await client.fetch(allPosts);
  const indexPosts = allBlogPosts?.filter((post) => post.index != 'false')
  /*indexPosts.map(post => {
    //console.log(post.category)
    post.cat = post.category.slug
  })*/
  // Prepare all post pages
  const allCategoryData = await client.fetch(allCategoriesWithPosts);
  allCategoryData.map(category => {
  //console.log(category.slug)
    const slugs = Object.entries(category.slug)
    slugs.forEach(([lang, slug]) => {
      let filteredPosts = new Array()
      if (lang == slug.current) filteredPosts = indexPosts.filter((p) => p._lang == lang)
      else filteredPosts = category.posts?.filter(p => p._lang == lang);
      filteredPosts.map(p => {
        p.cat = category.slug
      })
      if (category.abc || category.order == 'abc') {
        filteredPosts.sort((a, b) => {
          return a.slug.current.localeCompare(b.slug.current)
        })
      }

      // Prepare main Nav (on every post)
      /*const menu = allCategoryData.slice()
      menu.map(cat => {
        let fPosts = new Array()
        if (lang == slug.current) fPosts = []//indexPosts.filter(post => post._lang == lang)
        else fPosts = cat.posts?.filter(p => p._lang == lang);
        post.cat = category.slug
        fPosts.map(post => {
          post.cat = cat.slug
        })
        fPosts.forEach(p => {
          //console.log(lang, p._lang, p.slug.current)
        })

        if (cat.abc || cat.order == 'abc') {
          fPosts.sort((a, b) => {
            return a.slug.current.localeCompare(b.slug.current)
          })
        }
        cat.menu = fPosts
      })*/
      //console.log({menu})

      paths.add({params: {cat: slug.current}, props: {lang: lang, pages: allCategoryData, posts: filteredPosts, page: category}})
      /*if (slug.current == 'hu') {
        slug.current = undefined;
        paths.add({params: {cat: slug.current}, props: {lang: lang, pages: pages, posts: filteredPosts, page: page[0]}})
      }*/
    });
  })
  //console.log(pages)
  
  return Array.from(paths)
}

const { page, pages, posts, lang } = Astro.props
//console.log(pages)
---

<Mozaik {...Astro.props} {lang} summaryfrom="auto"/>
